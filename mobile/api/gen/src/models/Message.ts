/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Encounter } from "./Encounter";
import { EncounterFromJSON, EncounterToJSON } from "./Encounter";
import type { User } from "./User";
import { UserFromJSON, UserToJSON } from "./User";

/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     *
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof Message
     */
    content: string;
    /**
     *
     * @type {Date}
     * @memberof Message
     */
    sentAt: Date;
    /**
     *
     * @type {User}
     * @memberof Message
     */
    sender: User;
    /**
     *
     * @type {Encounter}
     * @memberof Message
     */
    encounter: Encounter;
}

/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("content" in value) || value["content"] === undefined) return false;
    if (!("sentAt" in value) || value["sentAt"] === undefined) return false;
    if (!("sender" in value) || value["sender"] === undefined) return false;
    if (!("encounter" in value) || value["encounter"] === undefined)
        return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): Message {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        content: json["content"],
        sentAt: new Date(json["sentAt"]),
        sender: UserFromJSON(json["sender"]),
        encounter: EncounterFromJSON(json["encounter"]),
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value == null) {
        return value;
    }
    return {
        id: value["id"],
        content: value["content"],
        sentAt: value["sentAt"].toISOString(),
        sender: UserToJSON(value["sender"]),
        encounter: EncounterToJSON(value["encounter"]),
    };
}
