/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface NotificationNewEventDTO
 */
export interface NotificationNewEventDTO {
    /**
     *
     * @type {string}
     * @memberof NotificationNewEventDTO
     */
    type: NotificationNewEventDTOTypeEnum;
    /**
     *
     * @type {string}
     * @memberof NotificationNewEventDTO
     */
    screen: NotificationNewEventDTOScreenEnum;
}

/**
 * @export
 */
export const NotificationNewEventDTOTypeEnum = {
    new_match: "new_match",
    new_event: "new_event",
    account_approved: "account_approved",
} as const;
export type NotificationNewEventDTOTypeEnum =
    (typeof NotificationNewEventDTOTypeEnum)[keyof typeof NotificationNewEventDTOTypeEnum];

/**
 * @export
 */
export const NotificationNewEventDTOScreenEnum = {
    NavigateToApproach: "Main_NavigateToApproach",
    FindPeople: "Main_FindPeople",
    FindPeople2: "Main_FindPeople",
} as const;
export type NotificationNewEventDTOScreenEnum =
    (typeof NotificationNewEventDTOScreenEnum)[keyof typeof NotificationNewEventDTOScreenEnum];

/**
 * Check if a given object implements the NotificationNewEventDTO interface.
 */
export function instanceOfNotificationNewEventDTO(
    value: object,
): value is NotificationNewEventDTO {
    if (!("type" in value) || value["type"] === undefined) return false;
    if (!("screen" in value) || value["screen"] === undefined) return false;
    return true;
}

export function NotificationNewEventDTOFromJSON(
    json: any,
): NotificationNewEventDTO {
    return NotificationNewEventDTOFromJSONTyped(json, false);
}

export function NotificationNewEventDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): NotificationNewEventDTO {
    if (json == null) {
        return json;
    }
    return {
        type: json["type"],
        screen: json["screen"],
    };
}

export function NotificationNewEventDTOToJSON(
    value?: NotificationNewEventDTO | null,
): any {
    if (value == null) {
        return value;
    }
    return {
        type: value["type"],
        screen: value["screen"],
    };
}
