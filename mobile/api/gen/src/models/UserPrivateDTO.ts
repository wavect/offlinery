/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { BlacklistedRegionDTO } from "./BlacklistedRegionDTO";
import {
    BlacklistedRegionDTOFromJSON,
    BlacklistedRegionDTOToJSON,
} from "./BlacklistedRegionDTO";

/**
 *
 * @export
 * @interface UserPrivateDTO
 */
export interface UserPrivateDTO {
    /**
     * The unique identifier of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    id: string;
    /**
     * The first name of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    firstName: string;
    /**
     * Age of user
     * @type {number}
     * @memberof UserPrivateDTO
     */
    age: number;
    /**
     * An array of image uris
     * @type {Array<string>}
     * @memberof UserPrivateDTO
     */
    imageURIs: Array<string>;
    /**
     * The user's bio
     * @type {string}
     * @memberof UserPrivateDTO
     */
    bio: string;
    /**
     * The user's trust score
     * @type {number}
     * @memberof UserPrivateDTO
     */
    trustScore?: number;
    /**
     * Indicates if the user account is active
     * @type {boolean}
     * @memberof UserPrivateDTO
     */
    isActive: boolean;
    /**
     * The unique email of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    email: string;
    /**
     * Indicates if the user wants to receive email updates
     * @type {boolean}
     * @memberof UserPrivateDTO
     */
    wantsEmailUpdates: boolean;
    /**
     * Locations to not be approached at
     * @type {Array<BlacklistedRegionDTO>}
     * @memberof UserPrivateDTO
     */
    blacklistedRegions: Array<BlacklistedRegionDTO>;
    /**
     *
     * @type {Date}
     * @memberof UserPrivateDTO
     */
    birthDay: Date;
    /**
     * The time from which the user can be approached
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachFromTime: string;
    /**
     * The time until which the user can be approached
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachToTime: string;
    /**
     * The date mode of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    dateMode: UserPrivateDTODateModeEnum;
    /**
     * The verification status of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    verificationStatus: UserPrivateDTOVerificationStatusEnum;
    /**
     * The approach choice of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachChoice: UserPrivateDTOApproachChoiceEnum;
    /**
     * The gender of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    gender: UserPrivateDTOGenderEnum;
    /**
     * The gender the user is interested in
     * @type {string}
     * @memberof UserPrivateDTO
     */
    genderDesire: UserPrivateDTOGenderDesireEnum;
    /**
     * Has user recently requested account deletion?
     * @type {boolean}
     * @memberof UserPrivateDTO
     */
    markedForDeletion: boolean;
}

/**
 * @export
 */
export const UserPrivateDTODateModeEnum = {
    ghost: "ghost",
    live: "live",
} as const;
export type UserPrivateDTODateModeEnum =
    (typeof UserPrivateDTODateModeEnum)[keyof typeof UserPrivateDTODateModeEnum];

/**
 * @export
 */
export const UserPrivateDTOVerificationStatusEnum = {
    verified: "verified",
    pending: "pending",
    not_needed: "not_needed",
} as const;
export type UserPrivateDTOVerificationStatusEnum =
    (typeof UserPrivateDTOVerificationStatusEnum)[keyof typeof UserPrivateDTOVerificationStatusEnum];

/**
 * @export
 */
export const UserPrivateDTOApproachChoiceEnum = {
    approach: "approach",
    be_approached: "be_approached",
    both: "both",
} as const;
export type UserPrivateDTOApproachChoiceEnum =
    (typeof UserPrivateDTOApproachChoiceEnum)[keyof typeof UserPrivateDTOApproachChoiceEnum];

/**
 * @export
 */
export const UserPrivateDTOGenderEnum = {
    woman: "woman",
    man: "man",
} as const;
export type UserPrivateDTOGenderEnum =
    (typeof UserPrivateDTOGenderEnum)[keyof typeof UserPrivateDTOGenderEnum];

/**
 * @export
 */
export const UserPrivateDTOGenderDesireEnum = {
    woman: "woman",
    man: "man",
    both: "both",
} as const;
export type UserPrivateDTOGenderDesireEnum =
    (typeof UserPrivateDTOGenderDesireEnum)[keyof typeof UserPrivateDTOGenderDesireEnum];

/**
 * Check if a given object implements the UserPrivateDTO interface.
 */
export function instanceOfUserPrivateDTO(
    value: object,
): value is UserPrivateDTO {
    if (!("id" in value) || value["id"] === undefined) return false;
    if (!("firstName" in value) || value["firstName"] === undefined)
        return false;
    if (!("age" in value) || value["age"] === undefined) return false;
    if (!("imageURIs" in value) || value["imageURIs"] === undefined)
        return false;
    if (!("bio" in value) || value["bio"] === undefined) return false;
    if (!("isActive" in value) || value["isActive"] === undefined) return false;
    if (!("email" in value) || value["email"] === undefined) return false;
    if (
        !("wantsEmailUpdates" in value) ||
        value["wantsEmailUpdates"] === undefined
    )
        return false;
    if (
        !("blacklistedRegions" in value) ||
        value["blacklistedRegions"] === undefined
    )
        return false;
    if (!("birthDay" in value) || value["birthDay"] === undefined) return false;
    if (
        !("approachFromTime" in value) ||
        value["approachFromTime"] === undefined
    )
        return false;
    if (!("approachToTime" in value) || value["approachToTime"] === undefined)
        return false;
    if (!("dateMode" in value) || value["dateMode"] === undefined) return false;
    if (
        !("verificationStatus" in value) ||
        value["verificationStatus"] === undefined
    )
        return false;
    if (!("approachChoice" in value) || value["approachChoice"] === undefined)
        return false;
    if (!("gender" in value) || value["gender"] === undefined) return false;
    if (!("genderDesire" in value) || value["genderDesire"] === undefined)
        return false;
    if (
        !("markedForDeletion" in value) ||
        value["markedForDeletion"] === undefined
    )
        return false;
    return true;
}

export function UserPrivateDTOFromJSON(json: any): UserPrivateDTO {
    return UserPrivateDTOFromJSONTyped(json, false);
}

export function UserPrivateDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): UserPrivateDTO {
    if (json == null) {
        return json;
    }
    return {
        id: json["id"],
        firstName: json["firstName"],
        age: json["age"],
        imageURIs: json["imageURIs"],
        bio: json["bio"],
        trustScore: json["trustScore"] == null ? undefined : json["trustScore"],
        isActive: json["isActive"],
        email: json["email"],
        wantsEmailUpdates: json["wantsEmailUpdates"],
        blacklistedRegions: (json["blacklistedRegions"] as Array<any>).map(
            BlacklistedRegionDTOFromJSON,
        ),
        birthDay: new Date(json["birthDay"]),
        approachFromTime: json["approachFromTime"],
        approachToTime: json["approachToTime"],
        dateMode: json["dateMode"],
        verificationStatus: json["verificationStatus"],
        approachChoice: json["approachChoice"],
        gender: json["gender"],
        genderDesire: json["genderDesire"],
        markedForDeletion: json["markedForDeletion"],
    };
}

export function UserPrivateDTOToJSON(value?: UserPrivateDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        id: value["id"],
        firstName: value["firstName"],
        age: value["age"],
        imageURIs: value["imageURIs"],
        bio: value["bio"],
        trustScore: value["trustScore"],
        isActive: value["isActive"],
        email: value["email"],
        wantsEmailUpdates: value["wantsEmailUpdates"],
        blacklistedRegions: (value["blacklistedRegions"] as Array<any>).map(
            BlacklistedRegionDTOToJSON,
        ),
        birthDay: value["birthDay"].toISOString().substring(0, 10),
        approachFromTime: value["approachFromTime"],
        approachToTime: value["approachToTime"],
        dateMode: value["dateMode"],
        verificationStatus: value["verificationStatus"],
        approachChoice: value["approachChoice"],
        gender: value["gender"],
        genderDesire: value["genderDesire"],
        markedForDeletion: value["markedForDeletion"],
    };
}
