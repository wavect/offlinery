/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlacklistedRegionDTO } from './BlacklistedRegionDTO';
import {
    BlacklistedRegionDTOFromJSON,
    BlacklistedRegionDTOFromJSONTyped,
    BlacklistedRegionDTOToJSON,
} from './BlacklistedRegionDTO';

/**
 * 
 * @export
 * @interface UserPrivateDTO
 */
export interface UserPrivateDTO {
    /**
     * The unique identifier of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    id: string;
    /**
     * Indicates if the user account is active
     * @type {boolean}
     * @memberof UserPrivateDTO
     */
    isActive: boolean;
    /**
     * The first name of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    firstName: string;
    /**
     * The birth date of the user
     * @type {Date}
     * @memberof UserPrivateDTO
     */
    birthDay: Date;
    /**
     * The gender of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    gender: UserPrivateDTOGenderEnum;
    /**
     * The gender the user is interested in
     * @type {string}
     * @memberof UserPrivateDTO
     */
    genderDesire: UserPrivateDTOGenderDesireEnum;
    /**
     * An array of image uris
     * @type {Array<string>}
     * @memberof UserPrivateDTO
     */
    imageURIs: Array<string>;
    /**
     * The verification status of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    verificationStatus: UserPrivateDTOVerificationStatusEnum;
    /**
     * The approach choice of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachChoice: UserPrivateDTOApproachChoiceEnum;
    /**
     * The time from which the user can be approached
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachFromTime: string;
    /**
     * The time until which the user can be approached
     * @type {string}
     * @memberof UserPrivateDTO
     */
    approachToTime: string;
    /**
     * The user's bio
     * @type {string}
     * @memberof UserPrivateDTO
     */
    bio: string;
    /**
     * The date mode of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    dateMode: UserPrivateDTODateModeEnum;
    /**
     * The user's trust score
     * @type {number}
     * @memberof UserPrivateDTO
     */
    trustScore?: number;
    /**
     * The unique email of the user
     * @type {string}
     * @memberof UserPrivateDTO
     */
    email: string;
    /**
     * Indicates if the user wants to receive email updates
     * @type {boolean}
     * @memberof UserPrivateDTO
     */
    wantsEmailUpdates: boolean;
    /**
     * Locations to not be approached at
     * @type {Array<BlacklistedRegionDTO>}
     * @memberof UserPrivateDTO
     */
    blacklistedRegions: Array<BlacklistedRegionDTO>;
}


/**
 * @export
 */
export const UserPrivateDTOGenderEnum = {
    woman: 'woman',
    man: 'man'
} as const;
export type UserPrivateDTOGenderEnum = typeof UserPrivateDTOGenderEnum[keyof typeof UserPrivateDTOGenderEnum];

/**
 * @export
 */
export const UserPrivateDTOGenderDesireEnum = {
    woman: 'woman',
    man: 'man'
} as const;
export type UserPrivateDTOGenderDesireEnum = typeof UserPrivateDTOGenderDesireEnum[keyof typeof UserPrivateDTOGenderDesireEnum];

/**
 * @export
 */
export const UserPrivateDTOVerificationStatusEnum = {
    verified: 'verified',
    pending: 'pending',
    not_needed: 'not_needed'
} as const;
export type UserPrivateDTOVerificationStatusEnum = typeof UserPrivateDTOVerificationStatusEnum[keyof typeof UserPrivateDTOVerificationStatusEnum];

/**
 * @export
 */
export const UserPrivateDTOApproachChoiceEnum = {
    approach: 'approach',
    be_approached: 'be_approached',
    both: 'both'
} as const;
export type UserPrivateDTOApproachChoiceEnum = typeof UserPrivateDTOApproachChoiceEnum[keyof typeof UserPrivateDTOApproachChoiceEnum];

/**
 * @export
 */
export const UserPrivateDTODateModeEnum = {
    ghost: 'ghost',
    live: 'live'
} as const;
export type UserPrivateDTODateModeEnum = typeof UserPrivateDTODateModeEnum[keyof typeof UserPrivateDTODateModeEnum];


/**
 * Check if a given object implements the UserPrivateDTO interface.
 */
export function instanceOfUserPrivateDTO(value: object): value is UserPrivateDTO {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('firstName' in value) || value['firstName'] === undefined) return false;
    if (!('birthDay' in value) || value['birthDay'] === undefined) return false;
    if (!('gender' in value) || value['gender'] === undefined) return false;
    if (!('genderDesire' in value) || value['genderDesire'] === undefined) return false;
    if (!('imageURIs' in value) || value['imageURIs'] === undefined) return false;
    if (!('verificationStatus' in value) || value['verificationStatus'] === undefined) return false;
    if (!('approachChoice' in value) || value['approachChoice'] === undefined) return false;
    if (!('approachFromTime' in value) || value['approachFromTime'] === undefined) return false;
    if (!('approachToTime' in value) || value['approachToTime'] === undefined) return false;
    if (!('bio' in value) || value['bio'] === undefined) return false;
    if (!('dateMode' in value) || value['dateMode'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('wantsEmailUpdates' in value) || value['wantsEmailUpdates'] === undefined) return false;
    if (!('blacklistedRegions' in value) || value['blacklistedRegions'] === undefined) return false;
    return true;
}

export function UserPrivateDTOFromJSON(json: any): UserPrivateDTO {
    return UserPrivateDTOFromJSONTyped(json, false);
}

export function UserPrivateDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserPrivateDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'isActive': json['isActive'],
        'firstName': json['firstName'],
        'birthDay': (new Date(json['birthDay'])),
        'gender': json['gender'],
        'genderDesire': json['genderDesire'],
        'imageURIs': json['imageURIs'],
        'verificationStatus': json['verificationStatus'],
        'approachChoice': json['approachChoice'],
        'approachFromTime': json['approachFromTime'],
        'approachToTime': json['approachToTime'],
        'bio': json['bio'],
        'dateMode': json['dateMode'],
        'trustScore': json['trustScore'] == null ? undefined : json['trustScore'],
        'email': json['email'],
        'wantsEmailUpdates': json['wantsEmailUpdates'],
        'blacklistedRegions': ((json['blacklistedRegions'] as Array<any>).map(BlacklistedRegionDTOFromJSON)),
    };
}

export function UserPrivateDTOToJSON(value?: UserPrivateDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'isActive': value['isActive'],
        'firstName': value['firstName'],
        'birthDay': ((value['birthDay']).toISOString().substring(0,10)),
        'gender': value['gender'],
        'genderDesire': value['genderDesire'],
        'imageURIs': value['imageURIs'],
        'verificationStatus': value['verificationStatus'],
        'approachChoice': value['approachChoice'],
        'approachFromTime': value['approachFromTime'],
        'approachToTime': value['approachToTime'],
        'bio': value['bio'],
        'dateMode': value['dateMode'],
        'trustScore': value['trustScore'],
        'email': value['email'],
        'wantsEmailUpdates': value['wantsEmailUpdates'],
        'blacklistedRegions': ((value['blacklistedRegions'] as Array<any>).map(BlacklistedRegionDTOToJSON)),
    };
}

