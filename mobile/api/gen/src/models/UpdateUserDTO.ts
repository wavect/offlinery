/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { BlacklistedRegionDTO } from "./BlacklistedRegionDTO";
import {
    BlacklistedRegionDTOFromJSON,
    BlacklistedRegionDTOToJSON,
} from "./BlacklistedRegionDTO";

/**
 *
 * @export
 * @interface UpdateUserDTO
 */
export interface UpdateUserDTO {
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    firstName?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    email?: string;
    /**
     *
     * @type {boolean}
     * @memberof UpdateUserDTO
     */
    wantsEmailUpdates?: boolean;
    /**
     *
     * @type {Date}
     * @memberof UpdateUserDTO
     */
    birthDay?: Date;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    gender?: UpdateUserDTOGenderEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateUserDTO
     */
    genderDesire?: Array<UpdateUserDTOGenderDesireEnum>;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    approachChoice?: UpdateUserDTOApproachChoiceEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateUserDTO
     */
    intentions?: Array<UpdateUserDTOIntentionsEnum>;
    /**
     *
     * @type {Array<number>}
     * @memberof UpdateUserDTO
     */
    ageRange?: Array<number>;
    /**
     * Array of blacklisted regions
     * @type {Array<BlacklistedRegionDTO>}
     * @memberof UpdateUserDTO
     */
    blacklistedRegions?: Array<BlacklistedRegionDTO>;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    approachFromTime?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    approachToTime?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    bio?: string;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    dateMode?: UpdateUserDTODateModeEnum;
    /**
     *
     * @type {string}
     * @memberof UpdateUserDTO
     */
    preferredLanguage?: UpdateUserDTOPreferredLanguageEnum;
    /**
     *
     * @type {Array<number>}
     * @memberof UpdateUserDTO
     */
    indexImagesToDelete?: Array<number>;
}

/**
 * @export
 */
export const UpdateUserDTOGenderEnum = {
    woman: "woman",
    man: "man",
} as const;
export type UpdateUserDTOGenderEnum =
    (typeof UpdateUserDTOGenderEnum)[keyof typeof UpdateUserDTOGenderEnum];

/**
 * @export
 */
export const UpdateUserDTOGenderDesireEnum = {
    woman: "woman",
    man: "man",
} as const;
export type UpdateUserDTOGenderDesireEnum =
    (typeof UpdateUserDTOGenderDesireEnum)[keyof typeof UpdateUserDTOGenderDesireEnum];

/**
 * @export
 */
export const UpdateUserDTOApproachChoiceEnum = {
    approach: "approach",
    be_approached: "be_approached",
    both: "both",
} as const;
export type UpdateUserDTOApproachChoiceEnum =
    (typeof UpdateUserDTOApproachChoiceEnum)[keyof typeof UpdateUserDTOApproachChoiceEnum];

/**
 * @export
 */
export const UpdateUserDTOIntentionsEnum = {
    friendship: "friendship",
    casual: "casual",
    relationship: "relationship",
} as const;
export type UpdateUserDTOIntentionsEnum =
    (typeof UpdateUserDTOIntentionsEnum)[keyof typeof UpdateUserDTOIntentionsEnum];

/**
 * @export
 */
export const UpdateUserDTODateModeEnum = {
    ghost: "ghost",
    live: "live",
} as const;
export type UpdateUserDTODateModeEnum =
    (typeof UpdateUserDTODateModeEnum)[keyof typeof UpdateUserDTODateModeEnum];

/**
 * @export
 */
export const UpdateUserDTOPreferredLanguageEnum = {
    en: "en",
    de: "de",
} as const;
export type UpdateUserDTOPreferredLanguageEnum =
    (typeof UpdateUserDTOPreferredLanguageEnum)[keyof typeof UpdateUserDTOPreferredLanguageEnum];

/**
 * Check if a given object implements the UpdateUserDTO interface.
 */
export function instanceOfUpdateUserDTO(value: object): value is UpdateUserDTO {
    return true;
}

export function UpdateUserDTOFromJSON(json: any): UpdateUserDTO {
    return UpdateUserDTOFromJSONTyped(json, false);
}

export function UpdateUserDTOFromJSONTyped(
    json: any,
    ignoreDiscriminator: boolean,
): UpdateUserDTO {
    if (json == null) {
        return json;
    }
    return {
        firstName: json["firstName"] == null ? undefined : json["firstName"],
        email: json["email"] == null ? undefined : json["email"],
        wantsEmailUpdates:
            json["wantsEmailUpdates"] == null
                ? undefined
                : json["wantsEmailUpdates"],
        birthDay: json["birthDay"] == null ? undefined : json["birthDay"],
        gender: json["gender"] == null ? undefined : json["gender"],
        genderDesire:
            json["genderDesire"] == null ? undefined : json["genderDesire"],
        approachChoice:
            json["approachChoice"] == null ? undefined : json["approachChoice"],
        intentions: json["intentions"] == null ? undefined : json["intentions"],
        ageRange: json["ageRange"] == null ? undefined : json["ageRange"],
        blacklistedRegions:
            json["blacklistedRegions"] == null
                ? undefined
                : (json["blacklistedRegions"] as Array<any>).map(
                      BlacklistedRegionDTOFromJSON,
                  ),
        approachFromTime:
            json["approachFromTime"] == null
                ? undefined
                : json["approachFromTime"],
        approachToTime:
            json["approachToTime"] == null ? undefined : json["approachToTime"],
        bio: json["bio"] == null ? undefined : json["bio"],
        dateMode: json["dateMode"] == null ? undefined : json["dateMode"],
        preferredLanguage:
            json["preferredLanguage"] == null
                ? undefined
                : json["preferredLanguage"],
        indexImagesToDelete:
            json["indexImagesToDelete"] == null
                ? undefined
                : json["indexImagesToDelete"],
    };
}

export function UpdateUserDTOToJSON(value?: UpdateUserDTO | null): any {
    if (value == null) {
        return value;
    }
    return {
        firstName: value["firstName"],
        email: value["email"],
        wantsEmailUpdates: value["wantsEmailUpdates"],
        birthDay: value["birthDay"],
        gender: value["gender"],
        genderDesire: value["genderDesire"],
        approachChoice: value["approachChoice"],
        intentions: value["intentions"],
        ageRange: value["ageRange"],
        blacklistedRegions:
            value["blacklistedRegions"] == null
                ? undefined
                : (value["blacklistedRegions"] as Array<any>).map(
                      BlacklistedRegionDTOToJSON,
                  ),
        approachFromTime: value["approachFromTime"],
        approachToTime: value["approachToTime"],
        bio: value["bio"],
        dateMode: value["dateMode"],
        preferredLanguage: value["preferredLanguage"],
        indexImagesToDelete: value["indexImagesToDelete"],
    };
}
