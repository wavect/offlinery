/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    RefreshJwtDTO,
    SignInDTO,
    SignInJwtDTO,
    SignInResponseDTO,
} from "../models/index";
import {
    RefreshJwtDTOToJSON,
    SignInDTOToJSON,
    SignInJwtDTOToJSON,
    SignInResponseDTOFromJSON,
} from "../models/index";
import * as runtime from "../runtime";

// We import this type even if it's unused to avoid additional
// template rendering logic. If the drawbacks of this approach
// are larger than the benefits, we can try another approach.
export interface AuthControllerRefreshJwtTokenRequest {
    refreshJwtDTO: RefreshJwtDTO;
}

export interface AuthControllerSignInRequest {
    signInDTO: SignInDTO;
}

export interface AuthControllerSignInByJWTRequest {
    signInJwtDTO: SignInJwtDTO;
}

/**
 * AuthApi - interface
 *
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     *
     * @param {RefreshJwtDTO} refreshJwtDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerRefreshJwtTokenRaw(
        requestParameters: AuthControllerRefreshJwtTokenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>>;

    /**
     */
    authControllerRefreshJwtToken(
        requestParameters: AuthControllerRefreshJwtTokenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object>;

    /**
     *
     * @param {SignInDTO} signInDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerSignInRaw(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SignInResponseDTO>>;

    /**
     */
    authControllerSignIn(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SignInResponseDTO>;

    /**
     *
     * @param {SignInJwtDTO} signInJwtDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authControllerSignInByJWTRaw(
        requestParameters: AuthControllerSignInByJWTRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SignInResponseDTO>>;

    /**
     */
    authControllerSignInByJWT(
        requestParameters: AuthControllerSignInByJWTRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SignInResponseDTO>;
}

/**
 *
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {
    /**
     */
    async authControllerRefreshJwtTokenRaw(
        requestParameters: AuthControllerRefreshJwtTokenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        if (requestParameters["refreshJwtDTO"] == null) {
            throw new runtime.RequiredError(
                "refreshJwtDTO",
                'Required parameter "refreshJwtDTO" was null or undefined when calling authControllerRefreshJwtToken().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/auth/token/refresh`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RefreshJwtDTOToJSON(requestParameters["refreshJwtDTO"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async authControllerRefreshJwtToken(
        requestParameters: AuthControllerRefreshJwtTokenRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.authControllerRefreshJwtTokenRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async authControllerSignInRaw(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SignInResponseDTO>> {
        if (requestParameters["signInDTO"] == null) {
            throw new runtime.RequiredError(
                "signInDTO",
                'Required parameter "signInDTO" was null or undefined when calling authControllerSignIn().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/auth/login`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: SignInDTOToJSON(requestParameters["signInDTO"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SignInResponseDTOFromJSON(jsonValue),
        );
    }

    /**
     */
    async authControllerSignIn(
        requestParameters: AuthControllerSignInRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SignInResponseDTO> {
        const response = await this.authControllerSignInRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     */
    async authControllerSignInByJWTRaw(
        requestParameters: AuthControllerSignInByJWTRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SignInResponseDTO>> {
        if (requestParameters["signInJwtDTO"] == null) {
            throw new runtime.RequiredError(
                "signInJwtDTO",
                'Required parameter "signInJwtDTO" was null or undefined when calling authControllerSignInByJWT().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/auth/login/jwt`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: SignInJwtDTOToJSON(requestParameters["signInJwtDTO"]),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SignInResponseDTOFromJSON(jsonValue),
        );
    }

    /**
     */
    async authControllerSignInByJWT(
        requestParameters: AuthControllerSignInByJWTRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SignInResponseDTO> {
        const response = await this.authControllerSignInByJWTRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
