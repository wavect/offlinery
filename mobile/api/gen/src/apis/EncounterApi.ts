/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EncounterPublicDTO } from "../models/index";
import { EncounterPublicDTOFromJSON } from "../models/index";
import * as runtime from "../runtime";

// We import this type even if it's unused to avoid additional
// template rendering logic. If the drawbacks of this approach
// are larger than the benefits, we can try another approach.
export interface EncounterControllerGetEncountersByUserRequest {
    userId: string;
}

/**
 * EncounterApi - interface
 *
 * @export
 * @interface EncounterApiInterface
 */
export interface EncounterApiInterface {
    /**
     *
     * @summary Get encounters of a user
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EncounterApiInterface
     */
    encounterControllerGetEncountersByUserRaw(
        requestParameters: EncounterControllerGetEncountersByUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<EncounterPublicDTO>>>;

    /**
     * Get encounters of a user
     */
    encounterControllerGetEncountersByUser(
        requestParameters: EncounterControllerGetEncountersByUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<EncounterPublicDTO>>;
}

/**
 *
 */
export class EncounterApi
    extends runtime.BaseAPI
    implements EncounterApiInterface
{
    /**
     * Get encounters of a user
     */
    async encounterControllerGetEncountersByUserRaw(
        requestParameters: EncounterControllerGetEncountersByUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<EncounterPublicDTO>>> {
        if (requestParameters["userId"] == null) {
            throw new runtime.RequiredError(
                "userId",
                'Required parameter "userId" was null or undefined when calling encounterControllerGetEncountersByUser().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/encounter/user/{userId}`.replace(
                    `{${"userId"}}`,
                    encodeURIComponent(String(requestParameters["userId"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(EncounterPublicDTOFromJSON),
        );
    }

    /**
     * Get encounters of a user
     */
    async encounterControllerGetEncountersByUser(
        requestParameters: EncounterControllerGetEncountersByUserRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<EncounterPublicDTO>> {
        const response = await this.encounterControllerGetEncountersByUserRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
