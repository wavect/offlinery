/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { EventPublicDTO } from "../models/index";
import { EventPublicDTOFromJSON } from "../models/index";
import * as runtime from "../runtime";

// We import this type even if it's unused to avoid additional
// template rendering logic. If the drawbacks of this approach
// are larger than the benefits, we can try another approach.
export interface EventControllerGetAllUpcomingEventsRequest {
    lang: string;
}

/**
 * EventApi - interface
 *
 * @export
 * @interface EventApiInterface
 */
export interface EventApiInterface {
    /**
     *
     * @summary Get upcoming and active events
     * @param {string} lang Language to get event data in.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiInterface
     */
    eventControllerGetAllUpcomingEventsRaw(
        requestParameters: EventControllerGetAllUpcomingEventsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<EventPublicDTO>>>;

    /**
     * Get upcoming and active events
     */
    eventControllerGetAllUpcomingEvents(
        requestParameters: EventControllerGetAllUpcomingEventsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<EventPublicDTO>>;
}

/**
 *
 */
export class EventApi extends runtime.BaseAPI implements EventApiInterface {
    /**
     * Get upcoming and active events
     */
    async eventControllerGetAllUpcomingEventsRaw(
        requestParameters: EventControllerGetAllUpcomingEventsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<EventPublicDTO>>> {
        if (requestParameters["lang"] == null) {
            throw new runtime.RequiredError(
                "lang",
                'Required parameter "lang" was null or undefined when calling eventControllerGetAllUpcomingEvents().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/event/events/{lang}`.replace(
                    `{${"lang"}}`,
                    encodeURIComponent(String(requestParameters["lang"])),
                ),
                method: "GET",
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(EventPublicDTOFromJSON),
        );
    }

    /**
     * Get upcoming and active events
     */
    async eventControllerGetAllUpcomingEvents(
        requestParameters: EventControllerGetAllUpcomingEventsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<EventPublicDTO>> {
        const response = await this.eventControllerGetAllUpcomingEventsRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }
}
