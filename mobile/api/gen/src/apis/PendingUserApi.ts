/* tslint:disable */
/* eslint-disable */
/**
 * Offlinery
 * API of Offlinery
 *
 * The version of the OpenAPI document: 1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
    RegistrationForVerificationRequestDTO,
    RegistrationForVerificationResponseDTO,
    SetAcceptedSpecialDataGenderLookingForDTO,
    VerifyEmailDTO,
} from "../models/index";
import {
    RegistrationForVerificationRequestDTOToJSON,
    RegistrationForVerificationResponseDTOFromJSON,
    SetAcceptedSpecialDataGenderLookingForDTOToJSON,
    VerifyEmailDTOToJSON,
} from "../models/index";
import * as runtime from "../runtime";

// We import this type even if it's unused to avoid additional
// template rendering logic. If the drawbacks of this approach
// are larger than the benefits, we can try another approach.
export interface PendingUserControllerRegisterUserForEmailVerificationRequest {
    registrationForVerificationRequestDTO: RegistrationForVerificationRequestDTO;
}

export interface PendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRequest {
    setAcceptedSpecialDataGenderLookingForDTO: SetAcceptedSpecialDataGenderLookingForDTO;
}

export interface PendingUserControllerVerifyEmailRequest {
    verifyEmailDTO: VerifyEmailDTO;
}

/**
 * PendingUserApi - interface
 *
 * @export
 * @interface PendingUserApiInterface
 */
export interface PendingUserApiInterface {
    /**
     *
     * @summary Creates a user with only an email to verify.
     * @param {RegistrationForVerificationRequestDTO} registrationForVerificationRequestDTO User email.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PendingUserApiInterface
     */
    pendingUserControllerRegisterUserForEmailVerificationRaw(
        requestParameters: PendingUserControllerRegisterUserForEmailVerificationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<RegistrationForVerificationResponseDTO>>;

    /**
     * Creates a user with only an email to verify.
     */
    pendingUserControllerRegisterUserForEmailVerification(
        requestParameters: PendingUserControllerRegisterUserForEmailVerificationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<RegistrationForVerificationResponseDTO>;

    /**
     *
     * @summary Accept special data privacy
     * @param {SetAcceptedSpecialDataGenderLookingForDTO} setAcceptedSpecialDataGenderLookingForDTO Accept special data privacy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PendingUserApiInterface
     */
    pendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRaw(
        requestParameters: PendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Accept special data privacy
     */
    pendingUserControllerSetAcceptedSpecialDataGenderLookingForAt(
        requestParameters: PendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Verify email with verification code.
     * @param {VerifyEmailDTO} verifyEmailDTO User email and verification code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PendingUserApiInterface
     */
    pendingUserControllerVerifyEmailRaw(
        requestParameters: PendingUserControllerVerifyEmailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Verify email with verification code.
     */
    pendingUserControllerVerifyEmail(
        requestParameters: PendingUserControllerVerifyEmailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class PendingUserApi
    extends runtime.BaseAPI
    implements PendingUserApiInterface
{
    /**
     * Creates a user with only an email to verify.
     */
    async pendingUserControllerRegisterUserForEmailVerificationRaw(
        requestParameters: PendingUserControllerRegisterUserForEmailVerificationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<RegistrationForVerificationResponseDTO>> {
        if (
            requestParameters["registrationForVerificationRequestDTO"] == null
        ) {
            throw new runtime.RequiredError(
                "registrationForVerificationRequestDTO",
                'Required parameter "registrationForVerificationRequestDTO" was null or undefined when calling pendingUserControllerRegisterUserForEmailVerification().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/pending-user`,
                method: "POST",
                headers: headerParameters,
                query: queryParameters,
                body: RegistrationForVerificationRequestDTOToJSON(
                    requestParameters["registrationForVerificationRequestDTO"],
                ),
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            RegistrationForVerificationResponseDTOFromJSON(jsonValue),
        );
    }

    /**
     * Creates a user with only an email to verify.
     */
    async pendingUserControllerRegisterUserForEmailVerification(
        requestParameters: PendingUserControllerRegisterUserForEmailVerificationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<RegistrationForVerificationResponseDTO> {
        const response =
            await this.pendingUserControllerRegisterUserForEmailVerificationRaw(
                requestParameters,
                initOverrides,
            );
        return await response.value();
    }

    /**
     * Accept special data privacy
     */
    async pendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRaw(
        requestParameters: PendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (
            requestParameters["setAcceptedSpecialDataGenderLookingForDTO"] ==
            null
        ) {
            throw new runtime.RequiredError(
                "setAcceptedSpecialDataGenderLookingForDTO",
                'Required parameter "setAcceptedSpecialDataGenderLookingForDTO" was null or undefined when calling pendingUserControllerSetAcceptedSpecialDataGenderLookingForAt().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/pending-user/accept-special-data`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: SetAcceptedSpecialDataGenderLookingForDTOToJSON(
                    requestParameters[
                        "setAcceptedSpecialDataGenderLookingForDTO"
                    ],
                ),
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Accept special data privacy
     */
    async pendingUserControllerSetAcceptedSpecialDataGenderLookingForAt(
        requestParameters: PendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.pendingUserControllerSetAcceptedSpecialDataGenderLookingForAtRaw(
            requestParameters,
            initOverrides,
        );
    }

    /**
     * Verify email with verification code.
     */
    async pendingUserControllerVerifyEmailRaw(
        requestParameters: PendingUserControllerVerifyEmailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters["verifyEmailDTO"] == null) {
            throw new runtime.RequiredError(
                "verifyEmailDTO",
                'Required parameter "verifyEmailDTO" was null or undefined when calling pendingUserControllerVerifyEmail().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters["Content-Type"] = "application/json";

        const response = await this.request(
            {
                path: `/pending-user/verify-email`,
                method: "PUT",
                headers: headerParameters,
                query: queryParameters,
                body: VerifyEmailDTOToJSON(requestParameters["verifyEmailDTO"]),
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Verify email with verification code.
     */
    async pendingUserControllerVerifyEmail(
        requestParameters: PendingUserControllerVerifyEmailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.pendingUserControllerVerifyEmailRaw(
            requestParameters,
            initOverrides,
        );
    }
}
