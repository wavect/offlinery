version: '3.8'

services:
  postgres:
    image: postgis/postgis:16-master
    container_name: postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_DATABASE:-offlinery}
      POSTGRES_USER: ${DB_USER:-offlinery}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-offlinery}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '127.0.0.1:${DB_PORT:-5432}:5432'  # Only allow local connections
    networks:
      - app_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER:-offlinery} -d ${DB_DATABASE:-offlinery}']
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    image: europe-west6-docker.pkg.dev/offlinery-439317/offlinery-backend/nestjs:${BACKEND_DOCKER_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - 3000
    env_file:
      - .env
    networks:
      - app_network
    depends_on:
      - postgres
    restart: on-failure

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - backend
    networks:
      - app_network
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local